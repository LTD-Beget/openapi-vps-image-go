/*
API Образов облачных серверов

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package begetOpenapiVps-image

import (
	"encoding/json"
)

// ImageGetRegionListResponse struct for ImageGetRegionListResponse
type ImageGetRegionListResponse struct {
	Regions []ImageRegion `json:"regions,omitempty"`
}

// NewImageGetRegionListResponse instantiates a new ImageGetRegionListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageGetRegionListResponse() *ImageGetRegionListResponse {
	this := ImageGetRegionListResponse{}
	return &this
}

// NewImageGetRegionListResponseWithDefaults instantiates a new ImageGetRegionListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageGetRegionListResponseWithDefaults() *ImageGetRegionListResponse {
	this := ImageGetRegionListResponse{}
	return &this
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *ImageGetRegionListResponse) GetRegions() []ImageRegion {
	if o == nil || isNil(o.Regions) {
		var ret []ImageRegion
		return ret
	}
	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageGetRegionListResponse) GetRegionsOk() ([]ImageRegion, bool) {
	if o == nil || isNil(o.Regions) {
    return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *ImageGetRegionListResponse) HasRegions() bool {
	if o != nil && !isNil(o.Regions) {
		return true
	}

	return false
}

// SetRegions gets a reference to the given []ImageRegion and assigns it to the Regions field.
func (o *ImageGetRegionListResponse) SetRegions(v []ImageRegion) {
	o.Regions = v
}

func (o ImageGetRegionListResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Regions) {
		toSerialize["regions"] = o.Regions
	}
	return json.Marshal(toSerialize)
}

type NullableImageGetRegionListResponse struct {
	value *ImageGetRegionListResponse
	isSet bool
}

func (v NullableImageGetRegionListResponse) Get() *ImageGetRegionListResponse {
	return v.value
}

func (v *NullableImageGetRegionListResponse) Set(val *ImageGetRegionListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableImageGetRegionListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableImageGetRegionListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageGetRegionListResponse(val *ImageGetRegionListResponse) *NullableImageGetRegionListResponse {
	return &NullableImageGetRegionListResponse{value: val, isSet: true}
}

func (v NullableImageGetRegionListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageGetRegionListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


